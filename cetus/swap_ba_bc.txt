import BN from "bn.js";
import * as dotenv from "dotenv";

dotenv.config({ path: "../.env" });

import {
  MAX_SQRT_PRICE,
  MIN_SQRT_PRICE,
} from "@cetusprotocol/cetus-sui-clmm-sdk/dist";
import {
  Connection,
  Ed25519Keypair,
  JsonRpcProvider,
  RawSigner,
  SUI_CLOCK_OBJECT_ID,
  TransactionBlock,
} from "@mysten/sui.js";
import { moveCallCoinZero } from "../utils/utils";

type SwapParams = {
  network: string;
  package: string;
  module: string;
  globalConfig: string;
  pool0: string;
  pool1: string;
  byAmountIn: boolean;
  amountIn: number;
  amountLimit: number;
  coinTypeA: string;
  coinTypeB: string;
  coinTypeC: string;
  a2b: boolean;
};

let swapParams: SwapParams;
// testnet || mainnet
const network: string = "testnet";

swapParams = {
  network: "https://rpc.mainnet.sui.io:443",
  package: "0x0f01bbc958a275421f817c498322c369e290bbe7c96a590d809667322e0fc7d1",
  module: "router",
  globalConfig:
    "0xdaa46292632c3c4d8f31f23ea0f9b36a28ff3677e9684980e4438403a67a3d8f",
  // 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN, 0x2::sui::SUI
  pool0: "0x06d8af9e6afd27262db436f0d37b304a041f710c3ea1fa4c3a9bab36b3569ad3",
  // 0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN, 0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN
  pool1: "0xc8d7a1503dc2f9f5b05449a87d8733593e2f0f3e7bffd90541252782e4d2ca20",
  byAmountIn: true,
  amountIn: 10000000,
  amountLimit: 0,
  coinTypeA: "0x2::sui::SUI",
  coinTypeB:
    "0xc060006111016b8a020ad5b33834984a437aaa7d3c74c18e09a95d48aceab08c::coin::COIN",
  coinTypeC:
    "0x5d4b302506645c37ff133b98c4b50a5ae14841659738d6d733d59d0d217a93bf::coin::COIN",
  a2b: true,
};

const admin = process.env.ADMIN_ADDRESS;
const phrase = process.env.ADMIN_PHRASE;
const keypair = Ed25519Keypair.deriveKeypair(phrase!);

const connOptions = new Connection({
  fullnode: swapParams.network,
});
console.log("Connecting to ", swapParams.network);

let provider = new JsonRpcProvider(connOptions);
const signer = new RawSigner(keypair, provider);

const txb = new TransactionBlock();
// txb.setGasBudget(1500000000);

const functionName = "swap_ba_bc";
const sqrtPriceLimit0 = getDefaultSqrtPriceLimit(false);
const sqrtPriceLimit1 = getDefaultSqrtPriceLimit(true);
console.log(`${swapParams.package}::${swapParams.module}::${functionName}`);

let coinsArray: string[] = [];
// const coins = async () => {
//   coinsArray = await selectTradeCoins(
//     provider,
//     admin!,
//     swapParams.a2b ? swapParams.coinTypeA : swapParams.coinTypeB,
//     new Decimal(swapParams.amountIn)
//   );
// };

// coins().then((res) => {
//   console.log("coins:", coinsArray);
//   console.log(coinsArray.map((id) => txb.object(id)));
// });
coinsArray.push(
  "0x00ea20a8c5468be859f12104a0482da7f68973f2a6832f32be2bd05a9079a7e8"
);

// Arg1: & mut Pool<Ty1, Ty0>,
// Arg2: & mut Pool<Ty1, Ty2>,
// Arg3: Coin<Ty0>
// Arg4: Coin<Ty2>, 
// Arg5: bool, 
// Arg6: u64, 
// Arg7: u64, 
// Arg8: u64, 
// Arg9: u64, 
// Arg10: u128, 
// Arg11: u128, 
// Arg12: & Clock

const coin_c = moveCallCoinZero(txb, swapParams.coinTypeC);

txb.moveCall({
  target: `${swapParams.package}::${swapParams.module}::${functionName}`,
  arguments: [
    // Arg0: & GlobalConfig
    txb.object(swapParams.globalConfig),
    // Arg1: & mut Pool<Ty1, Ty0>
    txb.object(swapParams.pool0),
    // Arg2: & mut Pool<Ty1, Ty2>
    txb.object(swapParams.pool1),
    // Arg3: Coin<Ty0>
    txb.makeMoveVec({
      objects: coinsArray.map((id) => txb.object(id)),
    }),
    // Arg4: Coin<Ty2>
    coin_c,
    // Arg5: bool
    txb.pure(swapParams.byAmountIn),
    // Arg6: u64
    txb.pure(swapParams.amountIn),
    
    txb.pure(swapParams.amountLimit),
    // Arg10: u128
    txb.pure(sqrtPriceLimit0.toString()),
    // Arg11: u128
    txb.pure(sqrtPriceLimit1.toString()),
    // Arg12: & Clock
    txb.object(SUI_CLOCK_OBJECT_ID),
  ],
  typeArguments: [
    swapParams.coinTypeA,
    swapParams.coinTypeB,
    swapParams.coinTypeC,
  ],
});

signer
  .signAndExecuteTransactionBlock({
    transactionBlock: txb,
    requestType: "WaitForLocalExecution",
    options: {
      showObjectChanges: true,
      showEffects: true,
    },
  })
  .then(function (res) {
    console.log("executed! result = ", res);
  });
function getDefaultSqrtPriceLimit(a2b: boolean): BN {
  return new BN(a2b ? MIN_SQRT_PRICE : MAX_SQRT_PRICE);
}
